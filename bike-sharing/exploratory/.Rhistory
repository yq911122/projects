})
with(df,{
s3d <- scatterplot3d(temp, humidity, windspeed,        # x y and z axis
color=colors, pch='.',        # circle color indicates no. of cylinders
type="h", lty.hplot=2,       # lines to the horizontal plane
main="weather against temp, humidity and windspeed",
xlab="temperature (C)",
ylab="humidity (%)",
zlab="wind speed (m/s)")
# add the legend
legend("bottom", inset=-.25,      # location and inset
cex=.5,              # suppress legend box, shrink text 50%
title="weather",
legend = levels(df$weather),
col=c("pink", "green", "yellow","blue"))
})
with(df,{
s3d <- scatterplot3d(temp, humidity, windspeed,        # x y and z axis
color=colors, pch='.',        # circle color indicates no. of cylinders
main="weather against temp, humidity and windspeed",
xlab="temperature (C)",
ylab="humidity (%)",
zlab="wind speed (m/s)")
# add the legend
legend("bottom", inset=-.25,      # location and inset
horiz = TRUE,cex=.5,              # suppress legend box, shrink text 50%
title="weather",
legend = levels(df$weather),
col=c("pink", "green", "yellow","blue"))
})
with(df,{
s3d <- scatterplot3d(temp, humidity, windspeed,        # x y and z axis
color=colors, pch=20,        # circle color indicates no. of cylinders
main="weather against temp, humidity and windspeed",
xlab="temperature (C)",
ylab="humidity (%)",
zlab="wind speed (m/s)")
# add the legend
legend("bottom", inset=-.25,      # location and inset
horiz = TRUE,cex=.5,              # suppress legend box, shrink text 50%
title="weather",
legend = levels(df$weather),
col=c("pink", "green", "yellow","blue"))
})
with(df,{
s3d <- scatterplot3d(temp, humidity, windspeed,        # x y and z axis
color=colors, pch=20,        # circle color indicates no. of cylinders
main="weather against temp, humidity and windspeed",
xlab="temperature (C)",
ylab="humidity (%)",
zlab="wind speed (m/s)"),
cex=.5
# add the legend
legend("bottom", inset=-.25,      # location and inset
horiz = TRUE,cex=.5,              # suppress legend box, shrink text 50%
title="weather",
legend = levels(df$weather),
col=c("pink", "green", "yellow","blue"))
})
with(df,{
s3d <- scatterplot3d(temp, humidity, windspeed,        # x y and z axis
color=colors, pch=20,        # circle color indicates no. of cylinders
main="weather against temp, humidity and windspeed",
xlab="temperature (C)",
ylab="humidity (%)",
zlab="wind speed (m/s)",
cex=.5)
# add the legend
legend("bottom", inset=-.25,      # location and inset
horiz = TRUE,cex=.5,              # suppress legend box, shrink text 50%
title="weather",
legend = levels(df$weather),
col=c("pink", "green", "yellow","blue"))
})
df$colors[df$weather==4] <- 'black'
with(df,{
s3d <- scatterplot3d(temp, humidity, windspeed,        # x y and z axis
color=colors, pch=20,        # circle color indicates no. of cylinders
main="weather against temp, humidity and windspeed",
xlab="temperature (C)",
ylab="humidity (%)",
zlab="wind speed (m/s)")
# add the legend
legend("bottom", inset=-.25,      # location and inset
horiz = TRUE,cex=.5,              # suppress legend box, shrink text 50%
title="weather",
legend = levels(df$weather),
col=c("pink", "green", "yellow","blue"))
})
df$colors[df$weather==1] <- 'white'
df$colors[df$weather==2] <- 'white'
df$colors[df$weather==3] <- 'white'
df$colors[df$weather==4] <- 'black'
with(df,{
s3d <- scatterplot3d(temp, humidity, windspeed,        # x y and z axis
color=colors, pch=20,        # circle color indicates no. of cylinders
main="weather against temp, humidity and windspeed",
xlab="temperature (C)",
ylab="humidity (%)",
zlab="wind speed (m/s)")
# add the legend
legend("bottom", inset=-.25,      # location and inset
horiz = TRUE,cex=.5,              # suppress legend box, shrink text 50%
title="weather",
legend = levels(df$weather),
col=c("pink", "green", "yellow","blue"))
})
with(df,{
s3d <- scatterplot3d(temp, humidity, windspeed,        # x y and z axis
color=alpha(colors,0.5), pch=20,        # circle color indicates no. of cylinders
main="weather against temp, humidity and windspeed",
xlab="temperature (C)",
ylab="humidity (%)",
zlab="wind speed (m/s)")
# add the legend
legend("bottom", inset=-.25,      # location and inset
horiz = TRUE,cex=.5,              # suppress legend box, shrink text 50%
title="weather",
legend = levels(df$weather),
col=c("pink", "green", "yellow","blue"))
})
addTrans <- function(color,trans)
{
# This function adds transparancy to a color.
# Define transparancy with an integer between 0 and 255
# 0 being fully transparant and 255 being fully visable
# Works with either color and trans a vector of equal length,
# or one of the two of length 1.
if (length(color)!=length(trans)&!any(c(length(color),length(trans))==1)) stop("Vector lengths not correct")
if (length(color)==1 & length(trans)>1) color <- rep(color,length(trans))
if (length(trans)==1 & length(color)>1) trans <- rep(trans,length(color))
num2hex <- function(x)
{
hex <- unlist(strsplit("0123456789ABCDEF",split=""))
return(paste(hex[(x-x%%16)/16+1],hex[x%%16+1],sep=""))
}
rgb <- rbind(col2rgb(color),trans)
res <- paste("#",apply(apply(rgb,2,num2hex),2,paste,collapse=""),sep="")
return(res)
}
with(df,{
s3d <- scatterplot3d(temp, humidity, windspeed,        # x y and z axis
color=addTrans(colors,200), pch=20,        # circle color indicates no. of cylinders
main="weather against temp, humidity and windspeed",
xlab="temperature (C)",
ylab="humidity (%)",
zlab="wind speed (m/s)")
# add the legend
legend("bottom", inset=-.25,      # location and inset
horiz = TRUE,cex=.5,              # suppress legend box, shrink text 50%
title="weather",
legend = levels(df$weather),
col=c("pink", "green", "yellow","blue"))
})
df$colors[df$weather==1] <- 'pink'
df$colors[df$weather==2] <- 'green'
df$colors[df$weather==3] <- 'yellow'
df$colors[df$weather==4] <- 'blue'
with(df,{
s3d <- scatterplot3d(temp, humidity, windspeed,        # x y and z axis
color=addTrans(colors,200), pch=20,        # circle color indicates no. of cylinders
main="weather against temp, humidity and windspeed",
xlab="temperature (C)",
ylab="humidity (%)",
zlab="wind speed (m/s)")
# add the legend
legend("bottom", inset=-.25,      # location and inset
horiz = TRUE,cex=.5,              # suppress legend box, shrink text 50%
title="weather",
legend = levels(df$weather),
col=c("pink", "green", "yellow","blue"))
})
with(df,{
s3d <- scatterplot3d(temp, humidity, windspeed,        # x y and z axis
color=addTrans(colors,100), pch=20,        # circle color indicates no. of cylinders
main="weather against temp, humidity and windspeed",
xlab="temperature (C)",
ylab="humidity (%)",
zlab="wind speed (m/s)")
# add the legend
legend("bottom", inset=-.25,      # location and inset
horiz = TRUE,cex=.5,              # suppress legend box, shrink text 50%
title="weather",
legend = levels(df$weather),
col=c("pink", "green", "yellow","blue"))
})
summary(df$weather)
install.packages("rgl")
library(rgl)
with(df, plot3d(temp, humidity, windspeed,
type="p", col=addTrans(colors,100)))
with(df, plot3d(temp, humidity, windspeed,
type="p", col=addTrans(colors,100))
legend3d("topright", legend = c('spring','summer','autumn','winter'), pch = 16, col =c("pink", "green", "yellow","blue"), cex=1, inset=c(0.02))
)
plot3d(df$temp, df$humidity, df$windspeed, type="p", col=addTrans(df$colors,100))
legend3d("topright", legend = c('spring','summer','autumn','winter'), pch = 16, col =c("pink", "green", "yellow","blue"), cex=1, inset=c(0.02))
plot3d(df$temp, df$humidity, df$windspeed, type="p", col=addTrans(df$colors,100))
legend3d("topright", legend = c('spring','summer','autumn','winter'), pch = 16, col =c("pink", "green", "yellow","blue"), cex=0.5, inset=c(0.02))
plot3d(df$temp, df$humidity, df$windspeed, type="p", col=addTrans(df$colors,100))
legend3d("topright", legend = c('spring','summer','autumn','winter'), pch = 16, col =c("pink", "green", "yellow","blue"))
plot3d(df$temp, df$humidity, df$windspeed, type="s", col=addTrans(df$colors,100))
plot3d(df$temp, df$humidity, df$windspeed, type="h", col=addTrans(df$colors,100))
plot3d(df$temp, df$humidity, df$windspeed, type="p", col=addTrans(df$colors,100))
summary(df$weather)
df[df$weather==4,]
df[1]
df[df$weather==4,]
df[,1]
df[1,]
summary(df)
x <- c('weather','temp','humidity','windspeed','hour','month')
m <- lm(df[,'count'],df[,x])
m <- lm(df[,'count']~df[,x])
y <- 'count'
m <- lm(y~x,data=df)
length(df[,x])
length(df[,'weather'])
length(df[,'temp'])
length(df[,'count'])
length(df[,'humidity'])
length(df[,'hour'])
length(df[,'month'])
length(df[,'windspeed'])
?lm
m <- lm(y~.,data=df)
m <- lm(y~'weather',data=df)
m <- lm(y~'humidity',data=df)
length(df[,y])
m <- lm(count~humidity,data=df)
m <- lm(get(y)~.,data=df)
summary(m)
?qqline
resid.plots <- function(lm){
res = resid(lm)
d <- plot(density(res)) #A density plot
n <- qqnorm(res) # A quantile normal plot - good for checking normality
q <- qqline(res)
return c(d,n,q)
}
resid.plots <- function(lm){
res = resid(lm)
d <- plot(density(res)) #A density plot
n <- qqnorm(res) # A quantile normal plot - good for checking normality
q <- qqline(res)
return(c(d,n,q))
}
m1 <- lm(get(y)~x, data=df)
m1 <- lm(get(y)~., data=df)
summary(m1)
m1.plots <- resid.plots(m1)
plot.lm(m1)
plot(m1)
print(m1)
m1[-]
m1[0]
m1[1]
m1[2]
length(m1[2])
length(m1[[2]])
lm
m1$fitted.values
m1$y
library(ggplot2)
ggplot(m1, aes(x=fitted.values+residuals,y=fitted.values))
ggplot(m1, aes(x=fitted.values+residuals,y=fitted.values))+geom_point()
?ggplot
df[,'fitted'] = m1$fitted.values
ggplot(df, aes_string(x=y,y='fitted'))+geom_point()
summary(m1)
df$season
m1 <- lm(get(y)~.-get(y), data=df)
summary(m1)
m1 <- lm(get(y)~get(x), data=df)
summary(m1)
x
get(X)
m1 <- lm(get(y)~weather+temp+humidity+windspeed+hour+month, data=df)
summary(m1)
df$weather
df[,'fitted'] = m1$fitted.values
ggplot(df, aes_string(x=y,y='fitted'))+geom_point()
df[,'fitted'] = m1$fitted.values
ggplot(df, aes_string(x=y,y='fitted'))+geom_point()
plot(m1)
summary(df)
x <- c('weather','temp','humidity','windspeed','hour','month','holiday','workingday','dayofweek')
m1 <- lm(get(y)~weather+temp+humidity+windspeed+hour+month+holiday+workingday+dayofweek, data=df)
summary(m1)
m1 <- lm(get(y)~weather+temp+humidity+windspeed+hour+month, data=df)
summary(m1)
summary(df$count)
ggplot(df, aes(count)) + geom_density()
savepng <- function(filename){
ggsave(paste(paste('plot',filename, sep='/'), 'png',sep='.'),scale=1.5)
}
savepng('count')
order(df[count])
order(df$count)
ggplot(df, aes(x=1:length(count), y=order(count)))+geom_point()
ggplot(df, aes(x=1:length(count), y=count[order(count))])+geom_point()
ggplot(df, aes(x=1:length(count), y=count[order(count)]))+geom_point()
ggplot(df, aes_string(x=y,y='fitted'))+geom_point()
df$y.ln = ln(df[,y])
df$y.ln = log(df[,y])
m <- lm(get(y.ln)~weather+temp+humidity+hour+month, data=df)
m <- lm(y.ln~weather+temp+humidity+hour+month, data=df)
summary(m)
plot(m)
df[,'fitted'] = m$fitted.values
ggplot(df, aes_string(x=y,y='fitted'))+geom_point()
ggplot(df, aes(y.ln)) + geom_density()
summary(df$count)
df[5632,]
df.1 <- df[-c(5632),]
m <- lm(y.ln~weather+temp+humidity+hour+month, data=df.1)
summary(m)
plot(m)
df[,'fitted'] = m$fitted.values
ggplot(df, aes_string(x=y,y='fitted'))+geom_point()
df.1[,'fitted'] = m$fitted.values
ggplot(df.1, aes_string(x=y,y='fitted'))+geom_point()
summary(df)
ggplot(df, aes(x=temp, y=count))+geom_density()
ggplot(df, aes(x=count, fill=workingday)) + geom+histogram()
ggplot(df, aes(x=count, fill=workingday)) + geom_histogram()
library(ggplot2)
?sqrt
coxbox(m)
boxcox(m)
library(MASS)
boxcox(m)
m <- lm(get(y)~weather+temp+humidity+windspeed+hour+month, data=df)
boxcox(m)
df$y.lnsqrt <- log(sqrt(df$count))
ggplot(df, aes(x=1:length(count), y=y.lnsqrt[order(y.lnsqrt)]))+geom_point()
ggplot(df, aes(x=1:length(count), y=y.ln[order(y.ln)]))+geom_point()
ggplot(df, aes(x=1:length(count), y=count[order(count)]))+geom_point()
ggplot(df, aes(x=1:length(count), y=count^0.25[order(count)]))+geom_point()
df$y.norm <- df$count^0.25
ggplot(df, aes(x=1:length(count), y=y.norm[order(y.norm)]))+geom_point()
summary(m)
vcov(m)
m <- lm(get(y)~weather+temp+humidity+hour+month, data=df.1)
vcov(m)
summary(m)
m <- lm(get(y)~weather+temp+humidity+hour+month, data=df.1,weights=sdˆ-2)
m <- lm(get(y)~weather+temp+humidity+hour+month, data=df.1,weights=sd^-2)
?lm
library(ggplot2)
m <- lm(get(y)~weather+temp+humidity+hour+month, data=df.1)
summary(m)
m <- lm(get(y)~., data=df)
summary(m)
m <- lm(get(y)~.,data=df.1)
summary(m)
m <- lm(get(y)~holiday+workingday+weather+temp+humidity+hour+dayofweek+windspeed+month.,data=df.1)
m <- lm(get(y)~holiday+workingday+weather+temp+humidity+hour+dayofweek+windspeed+month,data=df.1)
summary(m)
m <- lm(get(y)~weather+temp+humidity+hour+month,data=df.1)
summary(m)
plot(m)
plot(m$res)
lev <- hat(m)
x <- model.matrix(m)
lev <- hat(x)
plot(lev)
lev[0]
lev[1]
lev[order(lev)]
lev[lev>0.003]
length(lev)
df.1[5632]
names(lev) = c(1:5631,5633:10886)
lev[lev>0.003]
df.1[,1092:1113]
df.1[1092:1113,]
df.2 <- df.1[-c(1092:1113),]
m <- lm(get(y)~weather+temp+humidity+hour+month,data=df.2)
summary(m)
plot(m)
m <- lm(y.ln~weather+temp+humidity+hour+month,data=df.2)
summary(m)
plot(m)
summary
summary(df.2)
m <- lm(y.ln~weather+temp*humidity+temp*hour+humidity*hour+humidity*month,data=df.2)
summary(m)
plot(m)
summary(df.2[,c('temp','humidity','hour','month')])
m <- lm(get(y)~weather+temp+humidity+hour+month,data=df.2)
summary(m)
plot(m)
df.2$res <- m$res
m.res <- lm(abs(res)~count,data=df.2)
m.res$fitted
df.2$var <- m.res$fitted
wghm <- lm(get(y)~weather+temp+humidity+hour+month,data=df.2,weights=df.2$var)
summary(wghm)
plot(wghm)
m <- lm(get(y)~weather+temp+humidity+hour+month,data=df.1)
summary(m)
?lm
wghm <- lm(get(y)~weather+temp+humidity+hour+month,data=df.2,weights=1/df.2$var)
summary(wghm)
plot(wghm)
m <- lm(y.ln~weather+temp+humidity+hour+month,data=df.2)
df.2$res <- m$res
m.res <- lm(abs(res)~y.ln,data=df.2)
df.2$fitted <- m.res
df.2$fitted <- m.res$fitted
wght <- lm(y.ln~weather+temp+humidity+hour+month,data=df.2,weights=1/df.2$fitted)
summary(wght)
wght <- lm(y.ln~weather+temp+humidity+hour+month,data=df.2,weights=df.2$fitted)
summary(wght)
plot(wght)
test = read.table('../input/test_processed.csv',header=TRUE,sep=",")
m <- lm(y.ln~weather+temp+humidity+hour+month,data=df.2)
summary(test)
test$season = as.factor(test$season)
test$holiday = as.factor(test$holiday)
test$workingday = as.factor(test$workingday)
test$weather = as.factor(test$weather)
summary(test)
pred <- predict(m,test[,c('weather','temp','humidity','hour','month')])
test$weather[test$weather==4]=3
summaru=y(test)
summary(test)
pred <- predict(m,test[,c('weather','temp','humidity','hour','month')])
head(pred)
pred = data.frame(datetime=test.raw$datetime,count=0)
test.raw <- read.table('../input/test.csv',header=TRUE,sep=",")
pred = data.frame(datetime=test.raw$datetime,count=0)
pred$count <- predict(m,test[,c('weather','temp','humidity','hour','month')])
write.table(pred,file="res.csv",sep=',')
?exp
?round
pred$count <- round(exp(predict(m,test[,c('weather','temp','humidity','hour','month')])))
write.table(pred,file="res.csv",sep=',')
write.table(pred,file="res.csv",sep=',',quote=FALSE,col.names=c('datetime','count'))
head(pred)
write.table(pred,file="res.csv",sep=',',quote=FALSE,row.names=FALSE)
install.packages("randomForest")
library(randomForest)
rf <- randomForest(y.ln~weather+temp+humidity+hour+month,data=df.2,mtry=3)
print(rf)
pred <- predict(rf,test[,c('weather','temp','humidity','hour','month')])
pred = data.frame(datetime=test.raw$datetime,count=0)
pred$count <- round(exp(predict(rf,test[,c('weather','temp','humidity','hour','month')])))
write.table(pred,file="res.csv",sep=',',quote=FALSE,row.names=FALSE)
summary(rf)
library(randomForest)
summary(df)
rf <- randomForest(count~weather+temp+humidity+hour+month+holiday+workingday+windspeed+season,data=df,mtry=3)
pred$count <- round(exp(predict(rf,test[,c('weather','temp','humidity','hour','month','holiday','workingday','windspeed','season')])))
write.table(pred,file="res.csv",sep=',',quote=FALSE,row.names=FALSE)
pred$count <- round(predict(rf,test[,c('weather','temp','humidity','hour','month','holiday','workingday','windspeed','season')]))
write.table(pred,file="res.csv",sep=',',quote=FALSE,row.names=FALSE)
print(rf)
summary(rf)
rf$importance
sum(rf$importance)
rf$importance/sum(rf$importance)
?randomForest
rf <- randomForest(count~weather+temp+humidity+hour+month+holiday+workingday+windspeed+season,data=df,mtry=3,ntree=1000)
df$y.ln = log(df[,y]+1)
rf <- randomForest(y.ln~weather+atemp+humidity+hour+month+holiday+workingday+windspeed+season,data=df,mtry=3,ntree=1000)
pred$count <- round(exp(predict(rf,test[,c('weather','atemp','humidity','hour','month','holiday','workingday','windspeed','season')])))
write.table(pred,file="res.csv",sep=',',quote=FALSE,row.names=FALSE)
summary(df)
day_hour_counts <- as.data.frame(aggregate(df[,"count"], list(df$dayofweek, df$hour), mean))
day_hour_counts$Group.1 <- factor(day_hour_counts$Group.1, ordered=TRUE, levels=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
day_hour_counts$hour <- as.numeric(as.character(day_hour_counts$Group.2))
ggplot(day_hour_counts, aes(x = hour, y = Group.1)) + geom_tile(aes(fill = x)) + scale_fill_gradient(name="Average Counts", low="white", high="green") + theme(axis.title.y = element_blank())
library(ggplot2)
ggplot(day_hour_counts, aes(x = hour, y = Group.1)) + geom_tile(aes(fill = x)) + scale_fill_gradient(name="Average Counts", low="white", high="green") + theme(axis.title.y = element_blank())
summary(df)
day_hour_counts <- as.data.frame(aggregate(df[,"count"], list(factor(df$dayofweek), factor(df$hour)), mean))
day_hour_counts$Group.1 <- factor(day_hour_counts$Group.1, ordered=TRUE, levels=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
day_hour_counts$hour <- as.numeric(as.character(day_hour_counts$Group.2))
# plot heat mat with ggplot
ggplot(day_hour_counts, aes(x = hour, y = Group.1)) + geom_tile(aes(fill = x)) + scale_fill_gradient(name="Average Counts", low="white", high="green") + theme(axis.title.y = element_blank())
weekdays(df$dayofweek)
summary(day_hour_counts)
day_hour_counts <- as.data.frame(aggregate(df[,"count"], list(df$dayofweek, df$hour), mean))
summary(day_hour_counts)
day_hour_counts$Group.1 <- factor(day_hour_counts$Group.1, ordered=TRUE, levels=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
summary(day_hour_counts)
day_hour_counts <- as.data.frame(aggregate(df[,"count"], list(df$dayofweek, df$hour), mean))
day_hour_counts$Group.1 <- factor(day_hour_counts$Group.1, ordered=TRUE, levels=0:6)
summary(day_hour_counts)
day_hour_counts$hour <- as.numeric(as.character(day_hour_counts$Group.2))
ggplot(day_hour_counts, aes(x = hour, y = Group.1)) + geom_tile(aes(fill = x)) + scale_fill_gradient(name="Average Counts", low="white", high="green") + theme(axis.title.y = element_blank())
day_hour_counts <- as.data.frame(aggregate(df[,"count"], list(df$dayofweek, df$hour), mean))
day_hour_counts$Group.1 <- factor(day_hour_counts$Group.1, ordered=TRUE, levels=0:6,labels=c("Monday","Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
summary(day_hour_counts)
day_hour_counts$hour <- as.numeric(as.character(day_hour_counts$Group.2))
# plot heat mat with ggplot
ggplot(day_hour_counts, aes(x = hour, y = Group.1)) + geom_tile(aes(fill = x)) + scale_fill_gradient(name="Average Counts", low="white", high="green") + theme(axis.title.y = element_blank())
day_hour_casual <- as.data.frame(aggregate(df[,"casual"], list(df$dayofweek, df$hour), mean))
day_hour_casual$Group.1 <- factor(day_hour_casual$Group.1, ordered=TRUE, levels=0:6,labels=c("Monday","Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
day_hour_casual$hour <- as.numeric(as.character(day_hour_casual$Group.2))
# plot heat mat with ggplot
ggplot(day_hour_casual, aes(x = hour, y = Group.1)) + geom_tile(aes(fill = x)) + scale_fill_gradient(name="Average Counts", low="white", high="green") + theme(axis.title.y = element_blank())
day_hour_reg <- as.data.frame(aggregate(df[,"registered"], list(df$dayofweek, df$hour), mean))
day_hour_reg$Group.1 <- factor(day_hour_reg$Group.1, ordered=TRUE, levels=0:6,labels=c("Monday","Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
day_hour_reg$hour <- as.numeric(as.character(day_hour_reg$Group.2))
# plot heat mat with ggplot
ggplot(day_hour_reg, aes(x = hour, y = Group.1)) + geom_tile(aes(fill = x)) + scale_fill_gradient(name="Average Counts", low="white", high="green") + theme(axis.title.y = element_blank())
library(ggplot2)
ggplot(day_hour_reg, aes(x = hour, y = Group.1)) + geom_tile(aes(fill = x)) + scale_fill_gradient(name="Average Counts", low="white", high="green") + theme(axis.title.y = element_blank())
ggplot(day_hour_casual, aes(x = hour, y = Group.1)) + geom_tile(aes(fill = x)) + scale_fill_gradient(name="Average Counts", low="white", high="green") + theme(axis.title.y = element_blank())
